plugins {
  id "com.github.hierynomus.license" version "$licensePluginVersion"
  id "java"
  id "scala"
  id "idea"
  id "maven-publish"
  id "pl.allegro.tech.build.axion-release" version "$axionReleasePluginVersion"
}

scmVersion {
  tag {
    prefix = 'v'
  }
}

group = "com.xebialabs.xlrelease.plugins"
version = scmVersion.version

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
    vendor = JvmVendorSpec.ADOPTIUM
  }
  sourceCompatibility = JavaVersion.VERSION_17
  targetCompatibility = JavaVersion.VERSION_17
}

repositories {
  mavenLocal()
  mavenCentral()
  maven {
    url = "https://dist.xebialabs.com/public/maven2"
  }
  maven {
    url = "https://repo.jenkins-ci.org/releases/"
  }
  ["releases"].each { r ->
    maven {
      name = r
      credentials {
        username = nexusUserName
        password = nexusPassword
      }
      url = "${nexusBaseUrl}/repositories/${r}"
    }
  }
}

// Custom configuration to isolate dependencies to be exploded
configurations {
  explodeDependency {
    canBeResolved = true
    canBeConsumed = false
    transitive = false
  }

  implementation.extendsFrom(explodeDependency) // Allow normal usage
}

dependencies {
  implementation("org.springframework:spring-context:$springCoreVersion")
  implementation("com.xebialabs.xlrelease:xlr-server:$releaseVersion") {
    transitive = false
  }
  implementation("com.xebialabs.xlrelease:xlr-script-executor:$releaseVersion") {
    transitive = false
  }
  implementation("org.scala-lang:scala-library:$scalaFullVersion")
  implementation("org.clapper:grizzled-slf4j_$scalaVersion:$slf4jVersion")
  implementation("org.codehaus.groovy:groovy-all:$groovyVersion")

  explodeDependency("org.kohsuke:groovy-sandbox:$groovySandboxVersion") {
    transitive = false
  }
}


// Modify the JAR task to include only exploded classes, excluding META-INF
tasks.jar {
  from {
    configurations.explodeDependency.collect { zipTree(it).matching { exclude "META-INF/**" } } // Exclude META-INF
  }
}

license {
  header = rootProject.file("License.md")
  strictCheck = false
  ext.year = Calendar.getInstance().get(Calendar.YEAR)
  ext.name = "DIGITAL.AI"
}
